/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soundbiteapp;

import java.io.File;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.sound.sampled.Clip;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ptb
 * 
 * I guess there's a java class called Clip which could handle some of the
 * threading I did here
 */
public class SoundBiteUI extends javax.swing.JFrame {
    
    
    private ExecutorService executorService;
    
    //Table model to add rows
    private DefaultTableModel dtm;
    
    //To keep track of wavFiles and Threads
    HashMap<String, File> wavFileMap = new HashMap<>();
    ArrayList<ISoundThread> threadList = new ArrayList<>();

    
    //Only have a single recordTask to referece
    ISoundThread recordTask = null;
    
    String fileNameRegex = "^[a-zA-Z0-9]+$";
    Pattern pattern = Pattern.compile(fileNameRegex);

    /**
     * Creates new form SoundBiteUI
     */
    public SoundBiteUI() {
        initComponents();
        
        executorService = Executors.newFixedThreadPool(10);
        
        jLabel2.setVisible(false);
        dtm = (DefaultTableModel) this.jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clip Name", "Play?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Record clip with a name (only a-z, A-Z, and 0-9)");

        jButton1.setText("Record");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop All Activity");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Play Selected Clips");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter a name");

        jLabel3.setText("Play up to 10 clips at once");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(84, 84, 84)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // RECORD BUTTON
        //This check could be for if the record thread is running as well.
        if (this.recordTask == null || !this.recordTask.isRunning()){
            //Check that the filename is only alphanumeric for simplicity
            String fileName = jTextField1.getText();
            Matcher matcher = pattern.matcher(fileName);
            if (!matcher.matches()) {
                //Display hint and return without action
                jLabel2.setVisible(true);
                return;
            } else {
                jLabel2.setVisible(false);
            }
            
            
            //Change label to stop if the button was clicked on isRecording = false
            this.recordTask = new RecordSoundTask(fileName);
            this.threadList.add(this.recordTask);
            
            //RecordFuture never used
            Future recordFuture = this.executorService.submit(this.recordTask);
                        
            jButton1.setText("Stop Record");
            
        } else {
            
            
            //Get the wavFileName and add it to the table
            File wavFile = this.recordTask.getWavFile();
            this.wavFileMap.put(wavFile.getName(),
                                wavFile);
            
            System.out.println(wavFile.getAbsolutePath());
            
            this.dtm.addRow(new Object[] {wavFile.getName(), false});
            
            //Remove the record task from thread list and kill it
            this.threadList.remove(this.recordTask);
            this.recordTask.kill();
                        
            //Set the button back to record
            jButton1.setText("Record");
            jTextField1.setText("");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    //This is blocking so the Stop All Activity button is not necessary
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {

            // Play Selected Clips Button

            // Don't allow when recording :(
            if (!this.recordTask.isRunning()) {

                int numRows = jTable1.getModel().getRowCount();
                ArrayList<Clip> clipList = new ArrayList<>();

                for (int i=0; i<numRows; i++) {
                    boolean active = (boolean) this.dtm.getValueAt(i, 1);
                    if (active) {
                        String wavFileName = (String) this.dtm.getValueAt(i, 0);
                        System.out.println(wavFileName);
                        
                        File wavFile = wavFileMap.get(wavFileName);
                        
                        //Not the prettiest way to do this
                        //I'm making the task, submitting it to the executor service
                        //then getting the AudioClip object back from the callable
                        PlaySoundTask play = new PlaySoundTask(wavFile);
                        this.threadList.add(play);
                        Future clipFuture = executorService.submit(play);
                        Clip clip = (Clip)clipFuture.get();
                        System.out.println(clip.toString());
                        clipList.add(clip);
                    }
                }

                //While loop to wait until all clips are finished plaing
                boolean allFinished = false;
                while (!allFinished) {
                    allFinished = true;
                    for (Clip clip : clipList) {
                        System.out.println(String.format("Clip %s is Running? %s",clip.toString(),clip.isRunning()));
                        if (clip.isRunning()) {
                            allFinished = false;
                        } else {
                            clip.close();
                        }
                    }
                    sleep(50);
                }
                this.threadList.clear();
            }
        } catch (ExecutionException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Since I added this before making the Play All button, I thought I'd kick
    //Off playback in another thread, but since the playbck is blocking i'll 
    //just keep this here
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Stop All activity BUTTON
        for (ISoundThread th : this.threadList) {
            th.kill();
        }
        
        jButton1.setText("Record");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoundBiteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoundBiteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoundBiteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoundBiteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SoundBiteUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
